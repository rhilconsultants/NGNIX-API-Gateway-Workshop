kind: Deployment
apiVersion: apps/v1
metadata:
  name: fronetend
  labels:
    app: fronetend
    app.kubernetes.io/component: fronetend
    app.kubernetes.io/instance: fronetend
    app.kubernetes.io/name: fronetend
    app.kubernetes.io/part-of: api-workshop
    app.openshift.io/runtime: nginx 
    app.openshift.io/runtime-namespace: api-workshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fronetend
  template:
    metadata:
      labels:
        app: fronetend
        deployment: fronetend
    spec:
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
          # items:
            # - key: default.conf
              # path: default.conf
      - name: entrypoint
        configMap:
          name: entrypoint
          # items:
            # - key: entrypoint.sh
              # path: entrypoint.sh
      containers:
        - resources:
            requests:
              cpu: 150m
              memory: 128Mi
            limits: {}
          readinessProbe:
            httpGet:
              path: /probes/readiness
              port: 8080
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: fronetend
          volumeMounts:
            - name: nginx-config
              mountPath: '/usr/share/nginx/html/config'
            - name: entrypoint
              mountPath: '/usr/share/nginx/html/config'
          livenessProbe:
            httpGet:
              path: /probes/liveness
              port: 8080
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          envFrom:
          - configMapRef:
              name: app-environment
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: File
          # Update with your image name
          image: 'quay.io/thason/react-app:v1'
          #
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 1
  progressDeadlineSeconds: 600